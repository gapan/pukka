#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#
# pkgdepcheck.py
#
# Script to find missing dependencies in current based on stable
#
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
#                                                                             #
# pkgdepcheck - a script to find subdependencies                              #
#                                                                             #
# Copyright Tim Beech <tim~beech~at~gmail~dot~com>.                      #
#                                                                             #
# partly based on Frédérick Galusik's code from pkgtxt2db

# This program is free software; you can redistribute it and/or               #
# modify it under the terms of the GNU General Public License                 #
# as published by the Free Software Foundation; either version 2              #
# of the License, or (at your option) any later version.                      #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program; if not, write to the Free Software                 #
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. #
#                                                                             #
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++#
import os
import sys
import urllib2
import gzip
import argparse
import string
from ParsePkgtxt import Package

# Parse the CLI options
parser = argparse.ArgumentParser(
        prog='pkgdepcheck',
        description='Download and interrogate PACKAGES.TXTs',
        epilog=
        'e.g. pkgdepcheck -p midori, check for midori and its dependencies without refreshing package data')

parser.add_argument('-u', '--update', action="store_true",
        default=False,
        help='Download fresh PACKAGES.TXT files')

parser.add_argument('-P', '--packager', action="store",
        dest='packager', default='',
        help='Search for packages by a particular packager')

parser.add_argument('-e', '--expa', action="store",
        dest='expa', default='/',
        help='Choose the slackware extra/patches repository')

parser.add_argument('-p', '--package', action="store",
        dest='package', default='',
        help = 'The package to search the repos for')

parser.add_argument('-a', '--arch', action="store",
        dest='arch', default=os.uname()[4],
        help = 'Specify repo, defaults to local arch')

parser.add_argument('-d', '--download', action="store",
        dest='download', default='',
        help = 'Download package source and previous package')

parser.add_argument('-ns', '--nosource', action="store_true",
        default=False,
        help='Do not download package source files')

parser.add_argument('-np', '--nopackage', action="store_true",
        default=False,
        help='Do not download package files (just get source)')

parser.add_argument('-nd', '--nodeps', action="store_true",
        default=False,
        help='Do not check dependencies (just check package)')



parser.add_argument('-s', '--stable', action="store",
        dest='stable', default='14.0',
        help = 'Specify stable release, default 14.0')

parser.add_argument('-c', '--current', action="store",
        dest='current', default='14.1',
        help = 'Specify release for current, default 14.1')

parser.add_argument('-m', '--mirror', action="store",
        dest='mirror', default='http://download.salixos.org/',
        help = 'Choose a different mirror (default http://download.salixos.org)')

args = parser.parse_args()

# vars
pkgtxtz = 'PACKAGES.TXT.gz'
pkgtxt = 'PACKAGES.TXT'
update = args.update
packager = args.packager
pkg = args.package
expa = args.expa
download = args.download
download_source = not args.nosource
download_package = not args.nopackage
checkdeps= not args.nodeps
stable = args.stable
current = args.current
mirror = args.mirror
slash = '/'

def guessArch(arg):
    """
    If the user input contains the string '64', choose that repo, otherwise i486.
    guessArch(arg)
    """
    if arg.find('64') != -1:
        return 'x86_64'
    else:
        return 'i486'
arch = args.arch
repo = guessArch(arch)


def pkgtxturl(repo='i486', target='salix', release='14.0', expa='/'):
    """
    Download the slackware/salix PACKAGES.TXT.gz from a built URL and unzip it.
    pkgtxturl(repo, target, release, |extra|patches)
    """
    # adjust the target
    if target == 'slackware':
        target = 'slackware-'
    if target[0:5] == 'salix':
        target = ''

    #
    if expa == 'extra':
        expa = '/extra/'
    elif expa == 'patches':
        expa = '/patches/'


    # Build the URL to fetch PACKAGES.TXT
    url = mirror + repo + slash + target + release + expa + pkgtxtz

    # remove old files
    clean()

    # fetch
    try:
        f = urllib2.urlopen(url)
        print "Fetching ", url
        print ""
        # Open local_file for writing
        with open(os.path.basename(url), "wb") as local_file:
            local_file.write(f.read())
    except urllib2.HTTPError, e:
        print "HTTP Error:", e.code, url
        return False
    except urllib2.URLError, e:
        print "URL Error:", e.reason, url
        return False

    # unzip it
    fout = open(pkgtxt, 'w')
    with gzip.open(pkgtxtz, 'rb') as f:
        for line in f:
            fout.write(line)
    fout.close()

	# rename and clean up
    if expa != "" and expa[0] == '/' and expa[-1] == '/':
        expa = expa[1:-1]
    
    if target == '':
        target = 'salix-'
    filename = target + repo + '_' + release + expa 
    os.rename(pkgtxt, filename)
    clean()

def clean():
    """
    Remove any stray PACKAGES.TXT file or archive
    clean()
    """
    if os.path.isfile(pkgtxtz):
        os.remove(pkgtxtz)
    if os.path.isfile(pkgtxt):
        os.remove(pkgtxt)

def listPackages(nick):
    """
    List packages packaged by someone before but not yet this time
    listPackages(nick)
    """
    pkgtxtnameBase = 'salix-' + repo + '_'
    dbStable = repoToDict('salix-', stable)
    dbCurrent = repoToDict('salix-', current)
    for package in dbStable:
        pname = stripRelease(dbStable[package][2])
        if pname == nick: # this is one he did
            if not elem(package,dbCurrent):
                print package, ' ',
    print

def repoToDict(target, release):
    pkgtxtname = target + repo + '_' + release
    return Package.parse(Package(), pkgtxtname)

def stripRelease(pkgrel):
    """
    Strip digits from left recursively
    stripRelease(pjgrel)
    """
    if pkgrel == '':
        return ''
    if pkgrel[0].isdigit():
        return stripRelease(pkgrel[1:])
    else:
        return pkgrel

def elem(item, listobj):
    """
    There must be a library function that does this
    elem(item, listobj)
    """
    for i in listobj:
        if i == item:
            return True
    return False

def getSource(pkg):
    """
    Download source and package files for a given package
    from previous Slaix repo; check first.
    getSource(pkg)
    """
    pkgtxtFilename = 'salix-' + repo + '_' + stable
    db =  Package.parse(Package(), pkgtxtFilename)
    print pkgtxtFilename, ' checking for ', pkg
    if elem(pkg, db):
        #prepare commands
        subdir = db[pkg][6] + slash
        urlbase = mirror + repo + slash + stable
        wgetSourceCommand = 'wget  -nv -nd -crl 1 -R "index*" '
        wgetPackageCommand = 'wget -nv -nd -crl 1  -R "index*" -A ' + '"' + pkg + '*" '
        sourceURL = urlbase + '/source' + subdir[6:] + pkg + slash
        packageURL = urlbase + subdir
        #download package source files to a directory
        if download_source:
            getFiles(pkg, '-sourcefiles', wgetSourceCommand, sourceURL)
        #download package files to another directory
        if download_package:
            getFiles(pkg, '-packagefiles', wgetPackageCommand, packageURL)

    else:
        print "Package not available in Salix ", stable

def getFiles(pkg, dirsuffix, command, url):
    """
    Actually download files and put in dirs
    """
    destdir = pkg + dirsuffix
    os.system('mkdir -p ' + destdir)
    os.chdir(destdir)
    os.system(command + url)
    os.chdir('..')

def listDeps(pkg, pkgdict):
    """
    Check repos for package and, if it is unpackaged in Salix current,
    check its dependencies recursively.
    """
    #Problems: if a package is renamed between releases, deps like jdk|jre
    pass

def makedict():
    """
    Returns a dictionary associating each package name with four
    boolean variables to indicate whether it is resent in that repo
    """
    dbSalixStable = repoToDict('salix-', stable)
    dbSalixCurrent = repoToDict('salix-', current)
    dbSlackStable = repoToDict('slackware-', stable)
    dbSlackCurrent = repoToDict('slackware-', current)
    #for dep in data['giblib'][deps].split(","):
    pass

def main():
    #download databases if absent or if update requested, rename
    for target in {'slackware-', 'salix-'}:
        for release in {stable, current}:
            filename = target + repo + '_' + release 
            if expa != slash:
                filename = filename + expa
            if update or not os.path.isfile(filename):    
                pkgtxturl(repo, target, release, expa)

    #carry out specified actions
    if download:
        getSource(download)
    if packager:
        listPackages(packager)
    if pkg:
        if not checkdeps:
            #just check one package
            pass
        else:
            pkgdict = makedict()
            listDeps(pkg, pkgdict)
            pass

if __name__ == '__main__':
    main()
