pukka
Tim Beech
%%mtime(%m/%d/%Y)

%!target: man
%!encoding: utf-8
%!postproc(man): "^(\.TH.*) 1 "  "\1 8 "

= NAME =

pukka - the Finnish fisherman's knife for packagers


= SYNOPSIS =

**pukka** [//OPTIONS//] [//STRING(S)//]


= DESCRIPTION =

**pukka** is a command line tool that uses data from the Slakware
and Salix repositories for two releases to gather useful information 
about packages. **slapt-get** is used to download package data and
also to search for packages with a similar name to the search term 
entered.

The three main options query the database for a particular package, a
particular packager, and unpackaged dependencies of a package. It is also 
possible to download either the source or package files for a given 
package, or both.

This is a tool aimed at packagers, who will of course check the 
information. A typical workflow might involve checking for a certain
package (for instance, perhaps it was packaged for Salix last time, but
is now in the Slackware current repo). If the package looks as though 
it does need to be packaged for Salix, then you might check whether
it has any unpackaged dependencies. Detailed information can then be
sought on each of these as needed. When ready to make a new package, the 
source files and SLKBUILD from last time can be downloaded as a 
starting point.

There are also options to choose a different mirror and to specify 
different 'source' and 'current' repositories; the default for these is 
14.0 and 14.1.


= OPTIONS =

: **-u, --update**
update the package caches. This runs **slapt-get --update** to 
create two fake copies of /var/slapt-get, one for the stable
repository, one for current. The script then parses these to extract
information. If data is not present, it will be downloaded without
asking.

: **-P, --packager** //PACKAGER//
takes the initials of a particular packager to see which packages
from the stable repository have not been packaged for the new
Salix edition. To be sure about any package, check for detailed information.

: **-p, --package** //PACKAGE//
show details about specified package. Its presence or absence in each
of the four repositories (Salix, Slackware; stable, current) will
be suggestive of certain scenarios, for instance, if a package was in
both Slackware and Salix stable, and is in Slackware current, but not in
Salix stable, it looks like one where Slaix needs its own version for
some reason. But that may or may not still be the case. As ever, judgment
is needed. In particular, if a package has been renamed, there is no
way the script can tell. If there is no sign of the package, this option
then runs **slapt-get --search** to suggest similarly-named packages
that may be what you were actually looking for.

: **-D, --depcheck** //PACKAGE//
checks which of the package's dependencies in the stable repository (as
determined by the dependencies field in its entry in PACKAGES.TXT) appear
not to be available yet in the current repositories. Please note that this
is not a check of what is or is not installed in the running system; this can be 
done by **slapt-get --simulate**. If in doubt, please then check for detail
regarding a specific package listed.

: **-d, --download** //PACKAGE//
download source and package files for a particular package. The default
is to get both, from the stable repositories, for the architecture of the 
running system; however, the options **--no-source**, **--no-package**, 
**--get-current**, and **--arch**, in combination with **--download**, 
can be used to change this.

: **-ns, --no-source**
disables downloading source files: for instance, **--download {PKG}
--no-source** would download just the package files for {PKG}.

: **-np, --no-package**
disables downloading package files: for instance, **--download {PKG} 
--no-package** would download just the source files for {PKG}.

: **-C, --get-current**
by default, the **--download** option gets files from the stable repository;
**--get-current** chooses the current repository. This will probably be most 
useful when it is no longer 'current', that is, package submissions have
ceased for a given release cycle, but it is necessary to upgrade a 
given package for security or other reasons: in this case, the most
recent source files will be needed.

: **-a, --arch** //STRING//
specify the architecture of the package repositories to work with. The
default is the architecture of the running system. Anything containg '64'
is interpreted as x86_64, otherwise i486 is chosen.

: **-s, --stable** //STRING//
defines the 'stable' version as something other than the default, e.g.
13.37 rather than 14.0

: **-c, --current** //STRING//
defines the 'current' version as something other than the default

: **-m, --mirror** //STRING//
select another mirror. Defaults to http://download.salixos.org/

These three final options will persistently change the options in 
the configuration file, but this can of course be freely reversed.

= GENERAL OPTIONS =

: **-h, --help**
Prints a usage message briefly summarizing all command-line options
and exits.


= EXAMPLES =

: **pukka -p foo**
will search package repositories using the term
"foo" and provide information about the package of that name if
found; if not, **slapt-get --search foo** is called

: **pukka -d foo -np**
will download the source files for package foo to the current
directory (not a subdirectory).

: **pukka --update**
will refresh all package data
names starts with "sl"

: **spi -i midori**
will install a pre-built package by the name "midori", if it exists. If
it does not exist, it will search the SlackBuild database and if a
SlackBuild is available, it will build the package and install it using
that SlackBuild. Dependencies will be resolved in any case.

: **spi -s -i midori rkhunter**
will simulate the installation of packages named "midori" and "rkhunter"
showing a list of packages and SlackBuilds that will be
installed, including dependencies.


= WEBSITE =

https://github.com/mimosa67/pukka


= AUTHORS =

pukka was written by Tim Beech <tim~dot~beech~at~gmail~dot~com>


= SEE ALSO =

**slapt-get**(8)
